DDD :领域驱动设计    （领域对象统管封装行为和状态）（领域对象分割职责归属）
1. 将系统分成：controller > 粗粒度service > context > repository > dao
2. 实施DDD，CQRS读写分离是必须的架构--->事件驱动 
-------------bo->(business object)业务对象
对数据进行检索和处理的组件，是简单的真实世界的软件抽闲。
业务对象必要条件：1. 由状态和行为组成。
				  2. 表达了来自业务域的一个人，地点，事务或概念
				  3.可以重用
业务对象分类：
			1. 实体业务对象： 根据业务中的名词从业务域中提取。如客户，订单，物品。表达了一个人，地点，事物或者概念。
			2. 过程业务对象： 表达应用程序中业务处理过程或者工作流程任务。通常依赖于实体业务对象，是业务的动词。作为应用程序的管理者或者控制者。
			3. 时间业务对象： 表达应用程序中由于系统的一些操作造成或产生的一些事件。
------------vo->(value object)值对象
------------po->(presistant object)持久对象 ：可以看成是与数据库中的表相映射的对象
DDD问题：

	1. ddd 最大好处提炼bo和相关的行为，使系统代码设计不是以前台命令驱动，而是还原领域中的各种概念。
		问题：对OO抽象不到位，导致修改bo，与之关联的很多代码都需要修改。
	2. bo 必须缓存，bo创建代价很大，他有很多关联对象需要查询。
	3. 协作开发，职责划分。
	
目前解耦合：最普通面向接口，实际上接口耦合，最解耦合方式：消息或事件机制，消息或事件的生产者和使用者之间和消息或时间中间件耦合。
DDD 最有用的地方是以bo来描述业务。描述业务的地方明确，其他的层就可以复用。
=========别人的学习成果。
1. 创建领域对象采用构造函数或者工厂。
2. 一个聚合由一些相关的Entity和Value Object组成，一个聚合有一个聚合根，聚合根是Entity，整个聚合被看成是一个数据修改的单元，也就是说整个聚合内的所有对象要么同时被保存，要么都不能保存，即保存到数据持久层时必须以覆盖的方式来保存，。因为一个聚合是一个数据持久化的单元
   目前的内存缓存框架都已发展的比较成熟，性能已经不是问题；如MongoDb，MemCache，NoSQL，等等；


